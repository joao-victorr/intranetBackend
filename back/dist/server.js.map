{"version":3,"sources":["../src/Domain/Errors/AppErrors.ts","../src/Infrastructure/Auth/JWT.ts","../src/Infrastructure/Databases/Prisma/PrismaClient.ts","../src/Infrastructure/Security/EncryptionUtilit.ts","../src/Aplications/Services/Auth/LoginService.ts","../src/Aplications/Controller/Auth/LoginController.ts","../src/DTOs/Auth/LoginDTO.ts","../src/DTOs/Global/ErrorsDTO.ts","../src/Aplications/Routes/AuthRoutes.ts","../src/Infrastructure/Security/EnsureAutenticated.ts","../src/Aplications/Services/Users/GetUserByIdService.ts","../src/Aplications/Controller/Users/CreateUserByIdController.ts","../src/Aplications/Services/Users/CreateUserService.ts","../src/Aplications/Controller/Users/CreateUserController.ts","../src/Aplications/Services/Users/GetUsersService.ts","../src/Aplications/Controller/Users/GetUserController.ts","../src/Domain/Validators/BirthDate.ts","../src/DTOs/Users/CreateUserDTO.ts","../src/DTOs/Users/GetUserByIdDTO.ts","../src/DTOs/Users/GetUsersDTO.ts","../src/Aplications/Routes/UsersRoutes.ts","../src/Routes.ts","../src/server.ts","../src/Domain/Errors/ErrorsHandler.ts"],"sourcesContent":["// src/Domain/Errors/AppErrors.ts\n\nexport class AppError extends Error {\n  public readonly statusCode: number\n\n  constructor(statusCode: number, message: string) {\n    super(message)\n    this.statusCode = statusCode\n    this.name = 'AppError'; // Adicionado para melhor depuração\n    Object.setPrototypeOf(this, AppError.prototype); // Garante a cadeia de protótipos\n  }\n};\n\nexport class BadRequestError extends AppError { // Nome corrigido\n  constructor(message: string) { // Adicionado default message\n    super(400, message)\n    this.name = 'BadRequestError'; // Adicionado\n    Object.setPrototypeOf(this, BadRequestError.prototype); // Adicionado\n  }\n};\n\nexport class NotFoundError extends AppError {\n  constructor(message: string) { // Adicionado default message\n    super(404, message)\n    this.name = 'NotFoundError'; // Adicionado\n    Object.setPrototypeOf(this, NotFoundError.prototype); // Adicionado\n  }\n};\n\nexport class UnauthorizedError extends AppError { // Nome corrigido\n  constructor(message: string) { // Adicionado default message\n    super(401, message)\n    this.name = 'UnauthorizedError'; // Adicionado\n    Object.setPrototypeOf(this, UnauthorizedError.prototype); // Adicionado\n  }\n};\n\n// Exemplo de um erro 403 Forbidden, se precisar\nexport class ForbiddenError extends AppError {\n  constructor(message: string) {\n    super(403, message);\n    this.name = 'ForbiddenError';\n    Object.setPrototypeOf(this, ForbiddenError.prototype);\n  }\n}","import jwt from \"jsonwebtoken\";\n\nconst secret = process.env.JWT_SECRET || \"dev-secret\";\n\n// payload precisa ser um objeto que tenha, no mínimo, `sub`\nexport function signToken(\n  payload: { sub: string },\n  expiresIn?: number | `${number}${'s' | 'm' | 'h' | 'd'}` // exemplos: 60, '1h', '7d'\n) {\n  return jwt.sign(payload, secret, {\n    expiresIn: expiresIn ?? \"30m\"\n  });\n}\n\nexport function verifyToken(token: string) {\n  return jwt.verify(token, secret) as { sub: string; iat: number; exp: number };\n}","import { PrismaClient } from \"@prisma/client\";\n\nexport const repo = new PrismaClient({\n  log: process.env.NODE_ENV === 'development'\n    ? [\n        // { emit: 'stdout', level: 'query' },\n        // { emit: 'stdout', level: 'info' },\n        // { emit: 'stdout', level: 'warn' },\n        { emit: 'stdout', level: 'error' },\n      ]\n    : [{ emit: 'stdout', level: 'error' }],\n});","import * as bcrypt from 'bcrypt';\n\n// --- Bcrypt para Hashing de Senhas (para senhas de usuários do seu SaaS) ---\nconst SALT_ROUNDS = 10; // Valor recomendado para bcrypt\n\nexport async function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, SALT_ROUNDS);\n}\n\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}","import { UnauthorizedError } from \"@Domain/Errors/AppErrors\";\nimport { signToken } from \"Infrastructure/Auth/JWT\";\nimport { repo } from \"Infrastructure/Databases/Prisma/PrismaClient\";\nimport { comparePassword } from \"Infrastructure/Security/EncryptionUtilit\";\nimport { z } from \"zod\";\n\nexport const AuthRequestSchema = z.object({\n  username: z.string(),\n  password: z.string()\n})\n\nexport type AuthRequestDTO = z.infer<typeof AuthRequestSchema>;\n\nexport class LoginService {\n  async execute({username, password}: AuthRequestDTO) {\n    \n    const user = await repo.user.findFirst({\n      where: {\n        username\n      }\n    })\n\n    if (!user) {\n      const mensageError = \"Invalid username or password\"\n      throw new UnauthorizedError(mensageError)\n    }\n\n    const verifyPassWord = await comparePassword(password, user.password)\n\n    if (!verifyPassWord) {\n      const mensageError = \"Invalid username or password\"\n      throw new UnauthorizedError(mensageError)\n    }\n\n    const token = signToken({sub: user.id})\n\n    return {\n      token,\n      user: {\n        id: user.id,\n        name: user.name,\n        username: user.username,\n        birthDate: user.birthDate\n      }\n    }\n\n\n  }\n}","import { LoginService } from \"Aplications/Services/Auth/LoginService\";\nimport type { LoginRequestDTO } from \"DTOs/Auth/LoginDTO\";\nimport type { FastifyReply, FastifyRequest } from \"fastify\";\n\nexport class LoginController {\n  async handle( request: FastifyRequest, reply: FastifyReply ) {\n    const { username, password } = request.body as LoginRequestDTO\n\n\n    const service = new LoginService();\n    const auth = await service.execute({ username, password });\n    return reply.code(200).send(auth);\n  }\n}","import z from 'zod';\n\n\nexport const LoginRequestSchema = z.object({\n  username: z.string(),\n  password: z.string()\n})\n\nexport type LoginRequestDTO = z.infer<typeof LoginRequestSchema>\n\nexport const LoginReplySchema = z.object({\n  token: z.string(),\n  user: z.object({\n    id: z.string().uuid(),\n    name: z.string(),\n    username: z.string()\n  })\n});\nexport type LoginReplyDTO = z.infer<typeof LoginReplySchema>;","// src/Schemas/Shared/ErrorSchemas.ts\n\nimport { z } from \"zod\";\n\nexport const ErrorResponseSchema = z.object({\n  statusCode: z.number().int(),\n  error: z.string(),     // Deve ser exatamente o nome da classe do erro, mas deixamos flexível\n  message: z.string()\n});\n\n// Schemas específicos por tipo de erro (se quiser detalhar ainda mais):\nexport const BadRequestSchema = ErrorResponseSchema.extend({\n  statusCode: z.literal(400),\n  error: z.literal(\"BadRequestError\")\n});\n\nexport const NotFoundSchema = ErrorResponseSchema.extend({\n  statusCode: z.literal(404),\n  error: z.literal(\"NotFoundError\")\n});\n\nexport const UnauthorizedSchema = ErrorResponseSchema.extend({\n  statusCode: z.literal(401),\n  error: z.literal(\"UnauthorizedError\")\n});\n\nexport const ForbiddenSchema = ErrorResponseSchema.extend({\n  statusCode: z.literal(403),\n  error: z.literal(\"ForbiddenError\")\n});\n","import type { FastifyTypedInstance } from \"@Types/Fastify\";\nimport { LoginController } from \"Aplications/Controller/Auth/LoginController\";\nimport { LoginReplySchema, LoginRequestSchema } from \"DTOs/Auth/LoginDTO\";\nimport { UnauthorizedSchema } from \"DTOs/Global/ErrorsDTO\";\n\n\nconst loginController = new LoginController()\n\n\nexport const AuthRoutes = async (server: FastifyTypedInstance) => {\n  server.post(\n    \"/login\",\n    {\n      schema: {\n        tags: ['Auth'],\n        operationId: \"Auth.login\",  \n        summary: \"User login\",\n        description: \"Authenticate user with username and password. Returns JWT token on success.\",\n        body: LoginRequestSchema,\n        response: {\n          200: LoginReplySchema,\n          401: UnauthorizedSchema\n        }\n      }\n    },\n    loginController.handle\n  );\n};\n","import { UnauthorizedError } from \"@Domain/Errors/AppErrors\";\nimport { verifyToken } from \"@Infrastructure/Auth/JWT\";\nimport type { FastifyReply, FastifyRequest } from \"fastify\";\n\n\nexport async function EnsureAuthenticated(req: FastifyRequest, _reply: FastifyReply) {\n  const authHeader = req.headers.authorization;\n\n  if (!authHeader) {\n    throw new UnauthorizedError(\"Cabeçalho Authorization faltando\");\n  }\n\n  if (!authHeader.startsWith(\"Bearer \")) {\n    throw new UnauthorizedError(\"Formato de autorização inválido. Esperado 'Bearer <token>'.\");\n  }\n\n  const token = authHeader.split(\" \")[1];\n  if (!token) {\n    throw new UnauthorizedError(\"Token faltando\");\n  }\n\n  const payload = verifyToken(token); // Agora erros aqui serão capturados pelo seu error handler\n\n  req.user = { id: String(payload.sub) };\n}\n","import { BadRequestError } from \"@Domain/Errors/AppErrors\";\nimport { repo } from \"@Infrastructure/Databases/Prisma/PrismaClient\";\nimport type { GetUserByIdReplyDTO, GetUserByIdRequestDTO } from \"DTOs/Users/GetUserByIdDTO\";\n\n\nexport class GetUserByIdService {\n  async execute({ id }: GetUserByIdRequestDTO): Promise<GetUserByIdReplyDTO> {\n    \n    const user = await repo.user.findUnique({\n      where: {\n        id\n      },\n      omit: {\n        password: true\n      }\n    })\n\n    if (!user) {\n      throw new BadRequestError(\"UserId not found\");\n    }\n\n    return user\n  }\n}","\n\nimport { GetUserByIdService } from \"Aplications/Services/Users/GetUserByIdService\";\nimport type { GetUserByIdRequestDTO } from \"DTOs/Users/GetUserByIdDTO\";\nimport type { FastifyReply, FastifyRequest } from \"fastify\";\n\nexport class CreateUserByIdController {\n  async handle( request: FastifyRequest, _reply: FastifyReply ) {\n    const { id } = request.params as GetUserByIdRequestDTO;\n\n    const service = new GetUserByIdService();\n    const user = await service.execute({ id });\n    return user;\n  }\n}","import { BadRequestError } from \"@Domain/Errors/AppErrors\";\nimport type { CreateUserReplyDTO, CreateUserRequestDTO } from \"DTOs/Users/CreateUserDTO\";\nimport { repo } from \"Infrastructure/Databases/Prisma/PrismaClient\";\nimport { hashPassword } from \"Infrastructure/Security/EncryptionUtilit\";\n\n\n\n\n\n\n\nexport class CreateUserService {\n  async execut(user: CreateUserRequestDTO): Promise<CreateUserReplyDTO> {\n    \n    const verifyExistUser = await repo.user.findUnique({\n      where: {\n        username: user.username\n      }\n    });\n\n    if (verifyExistUser) {\n      const mesageError = \"User already exists\"\n      throw new BadRequestError( mesageError );\n    }\n\n    const passwordhash = await hashPassword(user.password);\n\n    const newUser = await repo.user.create({\n      data: {\n        name: user.name,\n        surname: user.surname,\n        username: user.username,\n        password: passwordhash,\n        birthDate: user.birthDate\n      },\n      omit: {\n        password: true\n      }\n    })\n\n    return { id: newUser.id }\n\n  }\n}","\n\nimport { CreateUserService } from \"Aplications/Services/Users/CreateUserService\";\nimport type { CreateUserRequestDTO } from \"DTOs/Users/CreateUserDTO\";\nimport type { FastifyReply, FastifyRequest } from \"fastify\";\n\nexport class CreateUserController {\n  async handle( request: FastifyRequest, reply: FastifyReply ) {\n    const user = request.body as CreateUserRequestDTO\n\n    const service = new CreateUserService();\n    const { id } = await service.execut(user);\n\n    return reply.code(201).send({ id })\n  }\n}\n\n","import { repo } from \"@Infrastructure/Databases/Prisma/PrismaClient\";\nimport type { GetUsersReplyDTO } from \"DTOs/Users/GetUsersDTO\";\n\n\nexport class GetUsersService {\n  async execute(): Promise<GetUsersReplyDTO> {\n    const users = await repo.user.findMany({\n      omit: {\n        password: true\n      }\n    });\n\n\n    return users\n  }\n}","\n\nimport { GetUsersService } from \"Aplications/Services/Users/GetUsersService\";\nimport type { FastifyReply, FastifyRequest } from \"fastify\";\n\nexport class GetUserController {\n  async handle( _request: FastifyRequest, reply: FastifyReply ) {\n    \n    const service = new GetUsersService();\n    const users = await service.execute();\n    return reply.code(200).send(users);\n  }\n}","import { type ZodType, z } from \"zod\"\n\nexport function parseBirthDate(): ZodType<Date, any, unknown> {\n  const minAge = 14;\n\n  return z.preprocess((val) => {\n    if (typeof val === \"string\" || val instanceof Date) {\n      const date = new Date(val)\n      if (Number.isNaN(date.getTime())) {\n        return z.NEVER; // ou apenas return undefined (mas aqui pode causar o erro)\n      }\n      return date;\n    }\n    return z.NEVER;\n  }, z.date()\n    .refine(date => date < new Date(), {\n      message: \"A data de nascimento não pode estar no futuro\",\n    })\n    .refine(date => {\n      const today = new Date()\n      const minBirthDate = new Date(today.getFullYear() - minAge, today.getMonth(), today.getDate())\n      return date <= minBirthDate\n    }, {\n      message: `É necessário ter pelo menos ${minAge} anos`,\n    })\n  );\n}\n","// import { parseBirthDate } from \"@Domain/Validators/BirthDate\";\nimport { parseBirthDate } from \"@Domain/Validators/BirthDate\";\nimport { z } from \"zod\";\n\n\nexport const CreateUserRequestSchema = z.object({\n  name: z.string(),\n  surname: z.string(),\n  username: z.string(),\n  password: z.string(),\n  birthDate: parseBirthDate()\n})\n\nexport type CreateUserRequestDTO = z.infer<typeof CreateUserRequestSchema>;\n\n\n\nexport const CreateUserReplySchema = z.object({\n  id: z.string().uuid()\n})\n\nexport type CreateUserReplyDTO = z.infer<typeof CreateUserReplySchema>;","\nimport { parseBirthDate } from \"@Domain/Validators/BirthDate\";\nimport { z } from \"zod\";\n\n\nexport const GetUserByIdRequestSchema = z.object({\n  id: z.string()\n})\n\nexport type GetUserByIdRequestDTO = z.infer<typeof GetUserByIdRequestSchema>\n\n\nexport const GetUserByIdReplySchama = z.object({\n  id: z.string().uuid(),\n  name: z.string(),\n  surname: z.string(),\n  username: z.string(),\n  birthDate: parseBirthDate()\n})\n\nexport type GetUserByIdReplyDTO = z.infer<typeof GetUserByIdReplySchama>;","import { parseBirthDate } from \"@Domain/Validators/BirthDate\";\nimport { z } from \"zod\";\n\n\nexport const GetUsersReplySchema = z.array(z.object({\n    id: z.string().uuid(),\n    name: z.string(),\n    surname: z.string(),\n    username: z.string(),\n    birthDate: parseBirthDate()\n}))\n\nexport type GetUsersReplyDTO = z.infer<typeof GetUsersReplySchema>;","import { EnsureAuthenticated } from \"@Infrastructure/Security/EnsureAutenticated\";\nimport type { FastifyTypedInstance } from \"@Types/Fastify\";\nimport { CreateUserByIdController } from \"Aplications/Controller/Users/CreateUserByIdController\";\nimport { CreateUserController } from \"Aplications/Controller/Users/CreateUserController\";\nimport { GetUserController } from \"Aplications/Controller/Users/GetUserController\";\nimport { BadRequestSchema, UnauthorizedSchema } from \"DTOs/Global/ErrorsDTO\";\nimport { CreateUserReplySchema, CreateUserRequestSchema } from \"DTOs/Users/CreateUserDTO\";\nimport { GetUserByIdReplySchama, GetUserByIdRequestSchema } from \"DTOs/Users/GetUserByIdDTO\";\nimport { GetUsersReplySchema } from \"DTOs/Users/GetUsersDTO\";\n\n\n\nconst createUserController = new CreateUserController();\nconst createUserByIdController = new CreateUserByIdController();\nconst getUserController = new GetUserController()\n\n\nexport const UsersRoutes = async (server: FastifyTypedInstance) => {\n  server.post(\n    \"/\",\n    {\n      preHandler: EnsureAuthenticated,\n      schema: {\n        tags: [\"User\"],\n        operationId: \"Create.User\",\n        summary: \"Create User\",\n        description: \"Create User\",\n        security: [{\n          bearerAuth: []\n        }],\n        body: CreateUserRequestSchema,\n        response: {\n          200: CreateUserReplySchema,\n          400: BadRequestSchema,\n          401: UnauthorizedSchema\n        }\n      }\n    },\n    createUserController.handle\n  );\n\n  server.get(\n    \"/\",\n    {\n      preHandler: EnsureAuthenticated,\n      schema: {\n        tags: [\"User\"],\n        operationId: \"Get.User.By.Id\",\n        summary: \"Get user by ID\",\n        description: \"Get user by ID\",\n        security: [{\n          bearerAuth: []\n        }],\n        response: {\n          200: GetUsersReplySchema,\n          401: UnauthorizedSchema\n        }\n      }\n    },\n    getUserController.handle\n  );\n\n  server.get(\n    \"/:id\",\n    {\n      preHandler: EnsureAuthenticated,\n      schema: {\n        tags: [\"User\"],\n        operationId: \"Get.User.By.Id\",\n        summary: \"Get user by ID\",\n        description: \"Get user by ID\",\n        security: [{\n          bearerAuth: []\n        }],\n        params: GetUserByIdRequestSchema,\n        response: {\n          200: GetUserByIdReplySchama,\n          401: UnauthorizedSchema\n        }\n      }\n    },\n    createUserByIdController.handle\n  );\n\n};","\nimport type { FastifyTypedInstance } from \"@Types/Fastify\";\nimport { AuthRoutes } from \"Aplications/Routes/AuthRoutes\";\nimport { UsersRoutes } from \"Aplications/Routes/UsersRoutes\";\n\n\n\nexport const Routes = async (server: FastifyTypedInstance) => {\n await server.register(AuthRoutes, { prefix: \"/auth\" });\n await server.register(UsersRoutes, { prefix: \"/users\" });\n\n\n}","import { Routes } from \"Routes\";\nimport fastifyCors from \"@fastify/cors\";\nimport fastifySwagger from \"@fastify/swagger\";\nimport fastifySwaggerUi from \"@fastify/swagger-ui\";\nimport { fastify } from \"fastify\";\nimport { jsonSchemaTransform, serializerCompiler, validatorCompiler, type ZodTypeProvider } from \"fastify-type-provider-zod\";\nimport { ErrorsHandler } from \"./Domain/Errors/ErrorsHandler\";\n\n\nconst _PORT = 3000;\nconst isProd = process.env.NODE_ENV === 'production';\n\n\nconst server = fastify({ logger: {\n  level: 'error',\n  transport: {\n    target: 'pino-pretty',\n    options: {\n      colorize: true,\n      translateTime: 'SYS:standard',\n      ignore: 'pid,hostname'\n    }\n  }\n}}).withTypeProvider<ZodTypeProvider>();\n\nserver.setSerializerCompiler(serializerCompiler);\nserver.setValidatorCompiler(validatorCompiler);\n\nserver.register(fastifySwagger, {\n  openapi: {\n    info: {\n      title: \"Fastify Zod Example\",\n      description: \"API Intranet Perdomo Doces\",\n      version: '0.1',\n    },\n    servers: isProd ?\n    [\n      {\n        url: \"https://souperdomo.perdomodoces.com.br\",\n        description: \"Desenvolvimento\"\n      }\n    ] :\n    [\n      {\n        url: \"http://0.0.0.0:3000\",\n        description: \"Desenvolvimento\"\n      }\n    ],\n    components: {\n      securitySchemes: {\n        // Exemplo de esquema para Bearer Token (o mais comum para JWT)\n        bearerAuth: { // <-- Este é o nome que você usará no 'security' das rotas\n          type: 'http',\n          scheme: 'Bearer',\n          bearerFormat: 'JWT', // Opcional, mas útil para documentação\n          description: 'Autenticação com token JWT. Cole o token completo aqui (ex: \"Bearer SEU_TOKEN_AQUI\")',\n        }\n      }\n    },\n  },\n  transform: jsonSchemaTransform\n})\n\nserver.register(fastifySwaggerUi, {\n  routePrefix: \"/docs\"\n})\n\nserver.register(fastifyCors, {\n  origin: \"*\"\n})\n\nserver.setErrorHandler(ErrorsHandler);\n\nRoutes(server);\n\n\nserver.listen({ port: _PORT, host: \"0.0.0.0\" }, (err, address) => {\n  if (err) {\n    console.error(err);\n    process.exit(1);\n  }\n  console.log(`Server is running at ${address}`);\n})\n\n\n\n\n\n\n\n\n\n\n\n","import type { FastifyError, FastifyReply, FastifyRequest } from \"fastify\";\nimport { AppError } from \"./AppErrors\";\n\n\nexport const ErrorsHandler = (\n  error: FastifyError,\n  request: FastifyRequest,\n  reply: FastifyReply\n) => {\n  const logger = request.server.log;\n\n  if (error instanceof AppError) {\n    logger.error(`AppError [${error.statusCode}]: ${error.message}`);\n    reply.status(error.statusCode).send({\n      statusCode: error.statusCode,\n      error: error.name,\n      message: error.message,\n    });\n} else {\n    logger.error(`Erro inesperado: ${error.message}`, error);\n    reply.status(500).send({\n      statusCode: 500,\n      error: 'Internal Server Error',\n      message: 'Ocorreu um erro interno no servidor.',\n    });\n  }\n};"],"mappings":"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","names":["jwt","hash","import_zod","z","import_zod","server","import_zod","import_zod","import_zod","import_zod","server","server","fastifySwagger","fastifySwaggerUi","fastifyCors"]}